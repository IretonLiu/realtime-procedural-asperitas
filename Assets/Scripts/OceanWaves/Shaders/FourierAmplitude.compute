// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSFourierAmplitude
#define M_PI 3.1415926535897932384626433832795

// #include "Complex.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;
RWTexture2D<float4> H0k;
RWTexture2D<float4> H0minusk;

RWTexture2D<float4> Hkt_dz;
RWTexture2D<float4> Hkt_dx;
RWTexture2D<float4> Hkt_dy;

// gradient
RWTexture2D<float4> Dhkt_dx;
RWTexture2D<float4> Dhkt_dz;


int N;
float Lx;
float t;

float2 ComplexMult(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float dispersion(float2 k) {
    float w_0 = 2.0f * M_PI / 200.0f;
    float k_mag = length(k);    // |k|
    if (k_mag < 0.000001) k_mag = 0.0;
    float w = floor(sqrt(9.81 * k_mag) / w_0) * w_0; //dispersion
    return w;
}

[numthreads(16, 16, 1)]
void CSFourierAmplitude(uint3 id : SV_DispatchThreadID)
{

    //The Fourier amplitude will be separated in to dx, dy, dz, i.e. the change in each direction
    float2 x = float2(id.xy) - float(N) / 2.0; // centres the values from 0 - N to -N/2 - N/2
    float2 k = float2(M_PI * 2.0 * x.x / Lx, M_PI * 2.0 * x.y / Lx); // wave number 


    // dispersion
    // float omega = dispersion(k);

    float k_mag = length(k);    // |k|
    if (k_mag < 0.00001) k_mag = 0.0;
    float omega = dispersion(k);

    float2 h0k = H0k[id.xy].rg;
    float2 h0minusk = H0minusk[id.xy].rg;

    float2 h0minusk_conj = float2(h0minusk.x, -h0minusk.y);
    //euler's formula

    float cos_wt = cos(omega * t);
    float sin_wt = sin(omega * t);

    float2 e_iwt = float2(cos_wt, sin_wt);
    float2 e_miwt = float2(cos_wt, -sin_wt);

    // dy for height 
    float2 hkt_dy = ComplexMult(h0k, e_iwt) + ComplexMult(h0minusk_conj, e_miwt);
    float2 hkt_dx;
    float2 hkt_dz;

    if (k_mag == 0.0) {
        hkt_dx = float2(0.0f, 0.0f);
        hkt_dz = float2(0.0f, 0.0f);
    }
    else {
        hkt_dx = ComplexMult(float2(0.0, -k.x / k_mag), hkt_dy);
        hkt_dz = ComplexMult(float2(0.0, -k.y / k_mag), hkt_dy);
    }


    Hkt_dx[id.xy] = float4(hkt_dx.x, hkt_dx.y, 0.0, 1.0);
    Hkt_dy[id.xy] = float4(hkt_dy.x, hkt_dy.y, 0.0, 1.0);
    Hkt_dz[id.xy] = float4(hkt_dz.x, hkt_dz.y, 0.0, 1.0);
}
