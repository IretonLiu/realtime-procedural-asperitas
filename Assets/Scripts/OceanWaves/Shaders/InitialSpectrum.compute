// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSInitialSpectrum
// #pragma kernel CSConjugateSpectrum

#define PI 3.1415926535897932384626433832795
#define g 9.81
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


int N; // number of points on side;
float Lx; // dimension;

float windSpeed;
float2 windDirection;
float A;


Texture2D<float2> GaussianNoise;
SamplerState SamplerGaussianNoise;
Texture2D<float2> GaussianNoise2;
SamplerState SamplerGaussianNoise2;

RWTexture2D<float4> H0k; // h0(k)
RWTexture2D<float4> H0minusk; // h0(-k)


float phillips(float2 k, float L) {
    float k_mag = length(k);    // |k|
    if (k_mag < 0.000001) return 0.0;
    float k_magSqr = k_mag * k_mag; // |k|^2

    float damping = 0.001;
    float l = L * damping;

    float kdotw = pow(dot(normalize(k), normalize(windDirection)), 8);

    return A * (exp(-1.0f / (k_magSqr * L * L)) / (k_magSqr * k_magSqr)) * exp(-k_magSqr * l * l) * kdotw;
}

[numthreads(16, 16, 1)]
void CSInitialSpectrum(uint3 id : SV_DispatchThreadID)
{
    float2 x = float2(id.xy) - float(N) / 2.0;
    float2 k = float2(PI * 2.0 * x.x / Lx, PI * 2.0 * x.y / Lx); // wave number 
    // float2 mk = float2(PI *(2.0 * -x.x - N) / Lx, PI * (2.0 * -x.y - N) / Lx); // wave number 
    float L = (windSpeed * windSpeed) / g; // the largest wave possible, not to be confused with Lx

    // Ph(k)
    float phk = phillips(k, L);
    // // Ph(-k)
    float phminusk = phillips(-k, L);


    float2 gaussianNoiseDraw = GaussianNoise[id.xy];
    float2 gaussianNoiseDraw2 = GaussianNoise2[id.xy];

    float2 h0k = gaussianNoiseDraw * sqrt(phk / 2.0);
    float2 h0minusk = gaussianNoiseDraw2 * sqrt(phminusk / 2.0);

      // H0k[id.xy] = float4(h0k, 0, 1);
    H0k[id.xy] = float4(h0k, 0, 1);
    H0minusk[id.xy] = float4(h0minusk, 0, 1);
}
